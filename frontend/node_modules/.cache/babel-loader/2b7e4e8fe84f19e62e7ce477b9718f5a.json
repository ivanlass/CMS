{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projekti\\\\MERN\\\\frontend\\\\src\\\\ClientSide\\\\Portal.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport Navigation from './Navigation';\nimport PostList from './PostList';\nimport { PostsContext } from '../context/postsContext';\nimport './client.css';\n\nfunction Portal() {\n  const [pickedCategory, setPickedCategory] = useState(\"all\");\n  const [posts, setPosts] = useContext(PostsContext);\n  const [filteredPosts, setFilteredPosts] = useState([]);\n  useEffect(() => {\n    axios({\n      method: 'get',\n      url: 'http://localhost:5000/posts'\n    }).then(response => {\n      setPosts(response.data);\n      setFilteredPosts(response.data);\n    }).catch(error => console.log(error));\n  }, []);\n\n  const fetchPickedCategory = e => setPickedCategory(e.currentTarget.dataset.category); //filtering posts based on category that user choose and returning to filteredPosts\n\n\n  useEffect(() => {\n    let filteredPosts;\n\n    if (pickedCategory === \"all\") {\n      filteredPosts = posts;\n    } else {\n      filteredPosts = posts && posts.filter(post => post.category === pickedCategory);\n    }\n\n    setFilteredPosts(filteredPosts);\n  }, [pickedCategory]);\n  console.log(filteredPosts != undefined && filteredPosts.length);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Navigation, {\n    fetchPickedCategory: fetchPickedCategory,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }), filteredPosts != undefined ? /*#__PURE__*/React.createElement(PostList, {\n    filteredPosts: filteredPosts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 43\n    }\n  }) : null);\n}\n\nexport default Portal;","map":{"version":3,"sources":["C:/Projekti/MERN/frontend/src/ClientSide/Portal.js"],"names":["React","useState","useContext","useEffect","axios","Navigation","PostList","PostsContext","Portal","pickedCategory","setPickedCategory","posts","setPosts","filteredPosts","setFilteredPosts","method","url","then","response","data","catch","error","console","log","fetchPickedCategory","e","currentTarget","dataset","category","filter","post","undefined","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,OAAO,cAAP;;AAGA,SAASC,MAAT,GAAkB;AACd,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBV,UAAU,CAACK,YAAD,CAApC;AACA,QAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,EAAD,CAAlD;AAGAE,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,KAAK,CAAC;AACFW,MAAAA,MAAM,EAAE,KADN;AAEFC,MAAAA,GAAG,EAAE;AAFH,KAAD,CAAL,CAIKC,IAJL,CAIUC,QAAQ,IAAI;AACdN,MAAAA,QAAQ,CAACM,QAAQ,CAACC,IAAV,CAAR;AACAL,MAAAA,gBAAgB,CAACI,QAAQ,CAACC,IAAV,CAAhB;AACH,KAPL,EAQKC,KARL,CAQWC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CARpB;AASH,GAVQ,EAUN,EAVM,CAAT;;AAaA,QAAMG,mBAAmB,GAAIC,CAAD,IAAOf,iBAAiB,CAACe,CAAC,CAACC,aAAF,CAAgBC,OAAhB,CAAwBC,QAAzB,CAApD,CAnBc,CAqBd;;;AACAzB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,aAAJ;;AACA,QAAIJ,cAAc,KAAK,KAAvB,EAA8B;AAC1BI,MAAAA,aAAa,GAAIF,KAAjB;AACH,KAFD,MAEO;AACHE,MAAAA,aAAa,GAAGF,KAAK,IAAIA,KAAK,CAACkB,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACF,QAAL,KAAkBnB,cAAvC,CAAzB;AACH;;AACDK,IAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACH,GARQ,EAQN,CAACJ,cAAD,CARM,CAAT;AAUAa,EAAAA,OAAO,CAACC,GAAR,CAAYV,aAAa,IAAIkB,SAAjB,IAA8BlB,aAAa,CAACmB,MAAxD;AACA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,mBAAmB,EAAER,mBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKX,aAAa,IAAIkB,SAAjB,gBAA6B,oBAAE,QAAF;AAAW,IAAA,aAAa,EAAElB,aAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA7B,GAA2E,IAFhF,CADJ;AAMH;;AAED,eAAeL,MAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Navigation from './Navigation'\r\nimport PostList from './PostList'\r\nimport { PostsContext } from '../context/postsContext'\r\nimport './client.css'\r\n\r\n\r\nfunction Portal() {\r\n    const [pickedCategory, setPickedCategory] = useState(\"all\")\r\n    const [posts, setPosts] = useContext(PostsContext)\r\n    const [filteredPosts, setFilteredPosts] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        axios({\r\n            method: 'get',\r\n            url: 'http://localhost:5000/posts'\r\n        })\r\n            .then(response => {\r\n                setPosts(response.data)\r\n                setFilteredPosts(response.data)\r\n            })\r\n            .catch(error => console.log(error))\r\n    }, [])\r\n\r\n\r\n    const fetchPickedCategory = (e) => setPickedCategory(e.currentTarget.dataset.category)\r\n\r\n    //filtering posts based on category that user choose and returning to filteredPosts\r\n    useEffect(() => {\r\n        let filteredPosts;\r\n        if (pickedCategory === \"all\") {\r\n            filteredPosts = (posts)\r\n        } else {\r\n            filteredPosts = posts && posts.filter(post => post.category === pickedCategory)\r\n        }\r\n        setFilteredPosts(filteredPosts)\r\n    }, [pickedCategory])\r\n\r\n    console.log(filteredPosts != undefined && filteredPosts.length)\r\n    return (\r\n        <div>\r\n            <Navigation fetchPickedCategory={fetchPickedCategory} />\r\n            {filteredPosts != undefined ? < PostList filteredPosts={filteredPosts} /> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Portal;\r\n"]},"metadata":{},"sourceType":"module"}